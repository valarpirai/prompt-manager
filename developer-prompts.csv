Name,Text,Visibility,Tags
"Code Review Checklist","Create a comprehensive code review checklist covering: 1) Security vulnerabilities and best practices 2) Performance optimizations 3) Code readability and maintainability 4) Testing coverage 5) Documentation quality 6) Error handling 7) Memory management 8) API design consistency. Include specific questions for each category.","PUBLIC","development;review;checklist;best-practices"
"Bug Report Template","Generate a detailed bug report template that includes: 1) Clear bug description 2) Steps to reproduce 3) Expected vs actual behavior 4) Environment details (OS, browser, versions) 5) Screenshots/logs 6) Severity level 7) Workarounds if any. Make it developer-friendly and actionable.","PUBLIC","development;bug-tracking;template;debugging"
"API Documentation Generator","Write comprehensive API documentation for [ENDPOINT_NAME] including: 1) Endpoint description and purpose 2) HTTP method and URL 3) Request parameters with types and validation rules 4) Request/response examples 5) Error codes and messages 6) Authentication requirements 7) Rate limiting info 8) SDK examples in multiple languages.","PUBLIC","api;documentation;backend;rest"
"Git Commit Message Standards","Create a git commit message following conventional commits format. Include: 1) Type (feat/fix/docs/style/refactor/test/chore) 2) Scope (optional) 3) Clear, concise description 4) Body explaining what and why (if needed) 5) Breaking changes notation 6) Issue references. Example: 'feat(auth): add OAuth2 integration for Google login'","PUBLIC","git;version-control;standards;best-practices"
"Database Schema Design","Design a database schema for [DOMAIN] with: 1) Entity relationship diagram 2) Table structures with appropriate data types 3) Primary and foreign key relationships 4) Indexes for performance 5) Constraints and validations 6) Migration scripts 7) Sample queries 8) Normalization considerations. Focus on scalability and maintainability.","PUBLIC","database;schema;sql;backend;architecture"
"Unit Test Generator","Generate comprehensive unit tests for [FUNCTION/CLASS] including: 1) Happy path test cases 2) Edge cases and boundary conditions 3) Error scenarios and exception handling 4) Mock dependencies appropriately 5) Test data setup and teardown 6) Assert statements with clear expectations 7) Test documentation. Use [TESTING_FRAMEWORK] syntax.","PUBLIC","testing;unit-tests;tdd;quality-assurance"
"Performance Optimization Guide","Analyze and provide performance optimization recommendations for [APPLICATION_TYPE]: 1) Code-level optimizations 2) Database query optimization 3) Caching strategies 4) Memory usage improvements 5) Network request optimization 6) Asset optimization 7) Monitoring and profiling tools 8) Benchmarking approach with metrics.","PUBLIC","performance;optimization;monitoring;scalability"
"Security Audit Checklist","Create a security audit checklist for [APPLICATION_TYPE]: 1) Authentication and authorization vulnerabilities 2) Input validation and sanitization 3) SQL injection and XSS prevention 4) CSRF protection 5) Secure communication (HTTPS, TLS) 6) Data encryption at rest and in transit 7) Dependency vulnerabilities 8) Access control and permissions 9) Logging and monitoring.","PUBLIC","security;audit;vulnerabilities;best-practices"
"Code Refactoring Plan","Analyze the following code and create a refactoring plan: 1) Identify code smells and technical debt 2) Break down refactoring into manageable steps 3) Prioritize changes by impact and risk 4) Suggest design patterns to apply 5) Estimate effort and timeline 6) Plan for testing during refactoring 7) Risk mitigation strategies 8) Before/after code examples.","PUBLIC","refactoring;technical-debt;clean-code;maintenance"
"DevOps Pipeline Setup","Design a CI/CD pipeline for [PROJECT_TYPE] including: 1) Source control integration 2) Build automation steps 3) Testing stages (unit, integration, e2e) 4) Code quality checks (linting, coverage) 5) Security scanning 6) Deployment strategies 7) Environment management 8) Rollback procedures 9) Monitoring and alerting setup.","PUBLIC","devops;ci-cd;automation;deployment;pipeline"
"Architecture Decision Record","Document an architecture decision for [SYSTEM/COMPONENT]: 1) Context and problem statement 2) Decision drivers and constraints 3) Considered options with pros/cons 4) Chosen solution with rationale 5) Consequences (positive and negative) 6) Implementation details 7) Success metrics 8) Review and update schedule. Follow ADR template format.","PUBLIC","architecture;documentation;decision-making;design"
"Error Handling Strategy","Design a comprehensive error handling strategy for [APPLICATION_TYPE]: 1) Error classification and severity levels 2) Consistent error response formats 3) Logging and monitoring requirements 4) User-friendly error messages 5) Retry mechanisms and circuit breakers 6) Graceful degradation approaches 7) Error recovery procedures 8) Documentation for error codes.","PUBLIC","error-handling;resilience;logging;user-experience"
"REST API Design Guidelines","Create REST API design guidelines including: 1) Resource naming conventions 2) HTTP method usage (GET, POST, PUT, DELETE, PATCH) 3) Status code standards 4) Request/response format consistency 5) Pagination and filtering strategies 6) Versioning approach 7) Authentication patterns 8) Rate limiting implementation 9) Documentation requirements.","PUBLIC","api;rest;backend;design-patterns;standards"
"Frontend Component Library","Design a reusable component for [COMPONENT_TYPE] including: 1) Component interface and props definition 2) Accessibility considerations (ARIA, keyboard navigation) 3) Responsive design implementation 4) State management approach 5) Error and loading states 6) Styling system integration 7) Unit tests and Storybook stories 8) Usage documentation and examples.","PUBLIC","frontend;components;ui;accessibility;react"
"Database Migration Script","Create a database migration script for [CHANGE_DESCRIPTION]: 1) Up migration with all necessary changes 2) Down migration for rollback capability 3) Data preservation and transformation logic 4) Index creation/removal 5) Constraint updates 6) Performance considerations 7) Testing strategy for migration 8) Backup and recovery procedures.","PUBLIC","database;migration;sql;backend;data-management"
"Monitoring and Alerting Setup","Design monitoring and alerting for [SYSTEM_TYPE]: 1) Key performance indicators (KPIs) to track 2) Application and infrastructure metrics 3) Log aggregation and analysis 4) Alert thresholds and escalation policies 5) Dashboard design for different audiences 6) Health check endpoints 7) Incident response procedures 8) Tool recommendations and configuration.","PUBLIC","monitoring;alerting;observability;devops;sre"
"Code Documentation Generator","Generate comprehensive code documentation for [CODE_ELEMENT]: 1) Clear description of purpose and functionality 2) Parameter descriptions with types and constraints 3) Return value documentation 4) Usage examples with different scenarios 5) Error conditions and exceptions 6) Performance considerations 7) Related functions/classes 8) Version history and changelog.","PUBLIC","documentation;code-comments;api-docs;maintenance"
"Microservices Design Pattern","Design a microservice for [SERVICE_DOMAIN] including: 1) Service boundaries and responsibilities 2) API contract definition 3) Data persistence strategy 4) Inter-service communication patterns 5) Service discovery and registration 6) Circuit breaker and retry mechanisms 7) Monitoring and logging approach 8) Deployment and scaling considerations.","PUBLIC","microservices;architecture;distributed-systems;design-patterns"
"Technical Interview Question","Create a technical interview question for [ROLE/LEVEL] covering [TOPIC]: 1) Problem statement with clear requirements 2) Multiple difficulty levels or follow-up questions 3) Expected solution approach 4) Key concepts being evaluated 5) Common mistakes to watch for 6) Evaluation criteria and scoring rubric 7) Time allocation recommendations.","PUBLIC","interview;assessment;hiring;technical-skills"
"Load Testing Strategy","Design a load testing strategy for [APPLICATION_TYPE]: 1) Test scenarios and user journeys 2) Load patterns (steady, spike, stress) 3) Performance metrics to measure 4) Testing environment setup 5) Data generation and management 6) Monitoring during tests 7) Results analysis and reporting 8) Performance bottleneck identification and resolution.","PUBLIC","performance;load-testing;scalability;qa;testing"